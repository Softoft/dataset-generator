@startuml

class Storage{
    - data: Map<string, Object>
    + {abstract} save(data)
    + {abstract} load(): Object
}


class Node{
    - parents: List<INode>
    - was_executed: bool
    + {async} execute()
}


class TicketBuilder{
 - graph: Graph
}


class Graph{
    - endNodes: List<INode>
}

class AINode extends Node{
    - chat_assistant: ChatAssistant
    + {async} execute(inputs)
}


package random{

class RandomNode{
  - random: IRandom
}
interface IRandom<V>{
    + {abstract} get_random(): V
}

class RandomTable<K, V> implements IRandom{
    - rows:Map<K, List<RandomSet<V>>>
    + {abstract} get_random(K): V
}


class RandomSet<V> implements IRandom{
    - items: List<V>
    - weights: List<float>
    + {abstract} get_random(): V
}

}

Graph o-- Node


Node o-- Storage
Node o-- Node

RandomNode o-- IRandom
RandomNode --|> Node

TicketBuilder o-- Graph

@enduml